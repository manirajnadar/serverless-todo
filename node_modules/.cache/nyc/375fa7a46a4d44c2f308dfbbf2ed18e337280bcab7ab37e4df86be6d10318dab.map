{"version":3,"file":"/home/samco-naman-ltp-235/myproject/projects/todo/backend/lib/data.ts","sources":["/home/samco-naman-ltp-235/myproject/projects/todo/backend/lib/data.ts"],"names":[],"mappings":";;AAAA,qCAAmC;AAOnC,MAAa,IAAI;IAKb,YAAY,IAAmB;QAC3B,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC5B,CAAC;CACJ;AAVD,oBAUC;AAEY,QAAA,IAAI,GAAG,KAAK,EAAE,IAAW,EAAkB,EAAE;IACtD,MAAM,MAAM,GAAkB;QAC1B,IAAI,EAAE,IAAI;QACV,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;KACpC,CAAC;IAEF,MAAM,YAAY,GAAoB,IAAI,kBAAQ,CAAC,cAAc,EAAE,CAAC;IACpE,MAAM,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;IAEzC,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,KAAK,EAAE,KAAiB,EAAoB,EAAE;IAC/D,MAAM,YAAY,GAAoB,IAAI,kBAAQ,CAAC,cAAc,EAAE,CAAC;IACpE,MAAM,IAAI,GAAgB,MAAM,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;IAEnE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;QACb,OAAO,EAAE,CAAC;KACb;IACD,MAAM,KAAK,GAAY,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAmB,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/E,IAAI,IAAI,CAAC,gBAAgB,EAAE;QACvB,KAAK,CAAC,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAChD,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,CAAC;QACvC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAW,EAAE,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;KACf;IACD,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AAEW,QAAA,SAAS,GAAG,GAAqB,EAAE;IAC5C,OAAO,YAAY,CAAC;QAChB,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;QACjC,KAAK,EAAE,IAAI;KACd,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import { DynamoDB } from 'aws-sdk';\nimport { DocumentClient } from 'aws-sdk/lib/dynamodb/document_client';\nimport AttributeMap = DocumentClient.AttributeMap;\nimport ScanOutput = DocumentClient.ScanOutput;\nimport PutItemInput = DocumentClient.PutItemInput;\nimport ScanInput = DocumentClient.ScanInput;\n\nexport class ToDo {\n    public id : string;\n    public text : string;\n    public state : string;\n\n    constructor(attr : AttributeMap) {\n        this.id = attr.id;\n        this.text = attr.text;\n        this.state = attr.state;\n    }\n}\n\nexport const save = async (todo : ToDo) : Promise<ToDo> => {\n    const params : PutItemInput = {\n        Item: todo,\n        TableName: process.env.TABLE_NAME,\n    };\n\n    const dynamoClient : DocumentClient = new DynamoDB.DocumentClient();\n    await dynamoClient.put(params).promise();\n\n    return todo;\n};\n\nconst scanDynamoDB = async (query : ScanInput) : Promise<ToDo[]> => {\n    const dynamoClient : DocumentClient = new DynamoDB.DocumentClient();\n    const data : ScanOutput = await dynamoClient.scan(query).promise();\n\n    if (!data.Items) {\n        return [];\n    }\n    const todos : ToDo[] = data.Items.map((attr : AttributeMap) => new ToDo(attr));\n    if (data.LastEvaluatedKey) {\n        query.ExclusiveStartKey = data.LastEvaluatedKey;\n        const list = await scanDynamoDB(query);\n        todos.forEach((item : ToDo) => {\n            list.push(item);\n        });\n        return list;\n    }\n    return todos;\n};\n\nexport const listTodos = () : Promise<ToDo[]> => {\n    return scanDynamoDB({\n        TableName: process.env.TABLE_NAME,\n        Limit: 1000,\n    });\n};\n"]}